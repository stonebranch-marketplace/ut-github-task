{
    "agent": null,
    "agentCluster": null,
    "agentClusterVar": null,
    "agentFieldsRestriction": "No Restriction",
    "agentType": "Any",
    "agentVar": null,
    "automaticOutputRetrievalFieldsRestriction": "No Restriction",
    "broadcastCluster": null,
    "broadcastClusterVar": null,
    "createConsole": false,
    "credentialFieldsRestriction": "No Restriction",
    "credentials": null,
    "credentialsVar": null,
    "description": "Import/Export from/to GitHub all UAC Objects v1.8",
    "desktopInteract": false,
    "elevateUser": false,
    "environment": [],
    "environmentVariablesFieldsRestriction": "No Restriction",
    "exitCodeOutput": null,
    "exitCodeProcessing": "Success Exitcode Range",
    "exitCodeProcessingFieldsRestriction": "No Restriction",
    "exitCodeText": null,
    "exitCodes": "0",
    "fields": [
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 5",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": "e.g. http://frankfurt.stonebranchdev.cloud:8080/opswise",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "UAC Base URL",
            "name": "base_url_uac",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 0,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "3a32e4ab763a435498ae4b4288347131"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 2",
            "fieldType": "Credential",
            "fieldValue": "UAC_REST_CRED",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "UAC REST Credentials",
            "name": "rest_credentials_uac",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 1,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "6b2fb0e9423d4983bb9581d733c052a8"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 4",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Commit definition. ${ops_execution_user}_${ops_agent_name}_app.version_%s_${ops_launch_time}_change_ is added in front of the message.",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Change Message",
            "name": "change_message",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 5,
            "showIfField": "Choice Field 2",
            "showIfFieldValue": "GitHub_to_UAC,UAC_to_GitHub",
            "sysId": "ec636627f4184e9db1a7c834629cab48"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 1",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": true,
            "hint": "Should be filled in order to use local/own/private GitHub server. For GitHub please leave empty.",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "GitHub Base URL",
            "name": "git_base_url",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 7,
            "showIfField": "Choice Field 2",
            "showIfFieldValue": "GitHub_to_UAC,UAC_to_GitHub",
            "sysId": "417f9b988ef04eae896fa2caa174cd68"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Credential Field 1",
            "fieldType": "Credential",
            "fieldValue": "GITHUB TOKEN",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Connection token for GitHub. Can be generated under github / Settings / Developer settings / Personal access tokens",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "GitHub Token",
            "name": "github_token",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 8,
            "showIfField": "Choice Field 2",
            "showIfFieldValue": "GitHub_to_UAC,UAC_to_GitHub",
            "sysId": "5fed7fdbf1194fd3947450067c5cf926"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 2",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "GitHub repository e.g. stonebranch-non-kernel/universal",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Repository Path",
            "name": "repo_path",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 9,
            "showIfField": "Choice Field 2",
            "showIfFieldValue": "GitHub_to_UAC,UAC_to_GitHub",
            "sysId": "b958cf02fb344854a43f33f368ea5431"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 3",
            "fieldType": "Text",
            "fieldValue": "development",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Branch name e.g. master, development",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Branch",
            "name": "branch",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 10,
            "showIfField": "Choice Field 2",
            "showIfFieldValue": "GitHub_to_UAC,UAC_to_GitHub",
            "sysId": "40ed66961d15423aafe4d07b8754274b"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 6",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Folder name of the task to be put under the Branch",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Folder Name",
            "name": "folder",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 14,
            "showIfField": "Choice Field 2",
            "showIfFieldValue": "GitHub_to_UAC,UAC_to_GitHub",
            "sysId": "a9eec7359bec40ef9e0a2917d737c6ef"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "UAC_to_GitHub",
                    "fieldValueLabel": "From UAC to GitHub",
                    "sequence": 0,
                    "sysId": "8cd42d2b9ed641f9aa68231aa9a9b43e",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "GitHub_to_UAC",
                    "fieldValueLabel": "From GitHub to UAC",
                    "sequence": 1,
                    "sysId": "f1defa816b57473d82be92ba8a9625e2",
                    "useFieldValueForLabel": false
                },
                {
                    "fieldValue": "UAC_to_Script",
                    "sequence": 2,
                    "sysId": "46feafc1cc8e41b9a433bf93ad6ce6b4",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "Script_to_UAC",
                    "sequence": 3,
                    "sysId": "6dda668e564d44b9a70b4471cc68acaa",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 2",
            "fieldType": "Choice",
            "fieldValue": "UAC_to_GitHub",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": null,
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Operation Type",
            "name": "operation_type",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 17,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "6d2422bc5c1748528ef50d7910f94258"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 7",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Name of the Object (i.e. Task, Template, Workflow, etc.)",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Object Name",
            "name": "object_name",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 18,
            "showIfField": "Choice Field 2",
            "showIfFieldValue": "GitHub_to_UAC,UAC_to_GitHub",
            "sysId": "bf1c70d87ffd4b87a3f8905f7147898f"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Script Field 1",
            "fieldType": "Script",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Script to be used for importing/exporting",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Object Name",
            "name": "script_name",
            "noSpaceIfHidden": true,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 19,
            "showIfField": "Choice Field 2",
            "showIfFieldValue": "Script_to_UAC,UAC_to_Script",
            "sysId": "659f9632673548c2badc64eb3bfd100e"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "agent",
                    "sequence": 0,
                    "sysId": "1da869f81c3445f4b01e17eff7ad12ae",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "agentcluster",
                    "sequence": 1,
                    "sysId": "ea54b18394cd4c988aeb6eec45f6bad0",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "businessservice",
                    "sequence": 2,
                    "sysId": "3646d9a8f67c4f48955235042354f0ea",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "calendar",
                    "sequence": 3,
                    "sysId": "8e83929e6b7b4f9787fcf4e6ea3f71e6",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "customday",
                    "sequence": 4,
                    "sysId": "0ea13ef120314c7886a8e18a06a6c982",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "credential",
                    "sequence": 5,
                    "sysId": "5e159dec3b0d482d8b93fa4e92306304",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "databaseconnection",
                    "sequence": 6,
                    "sysId": "26f8b5607dff4074830a06c8b0953061",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "emailconnection",
                    "sequence": 7,
                    "sysId": "5f26ad0fdf314c4e89f94db454cd6caf",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "peoplesoftconnection",
                    "sequence": 8,
                    "sysId": "bf2cc76760b6416d8723dc60af2786b9",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "sapconnection",
                    "sequence": 9,
                    "sysId": "eae343bf4267486aac1e5361b16be174",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "script",
                    "sequence": 10,
                    "sysId": "39ed7742174242efb4d6600a4cb45f46",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "task",
                    "sequence": 11,
                    "sysId": "00ac2aaa7a1c443c93da6362afee7855",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "trigger",
                    "sequence": 12,
                    "sysId": "0a83d6993e88445796a6c6f7c9f7552b",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "universaltemplate",
                    "sequence": 13,
                    "sysId": "6fcf6b5db75741318436134bd148e779",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "virtual",
                    "sequence": 14,
                    "sysId": "699040cccc844e19a02dfb89c7f07af9",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "variable",
                    "sequence": 15,
                    "sysId": "a010c3a0ea12420ea388c243e0d13cbc",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 3",
            "fieldType": "Choice",
            "fieldValue": "Task Linux/Unix",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "agent, agentcluster, businessservice, calendar, customday, credential, databaseconnection, emailconnection, peoplesoftconnection, sapconnection, task, trigger, script, virtual, variable",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Object Type",
            "name": "object_type",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 21,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "15918ce027d94c059234a94bd35953b6"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 8",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Refer to Product Documentation e.g. For Tasks: Workflow, Timer, Windows, Linux/Unix, z/OS, SQL, Task Monitor,... For Triggers: Time, Temporary, Manual,...",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Object Sub Type",
            "name": "object_sub_type",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 22,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "8ef95fb4485d4d0086fb0321446314e8"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Text Field 9",
            "fieldType": "Text",
            "fieldValue": null,
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "Comma Separated List of Business Services",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Business Services",
            "name": "business_services",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 23,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "f0be78ce55994c928e18447217270203"
        },
        {
            "arrayNameTitle": null,
            "arrayValueTitle": null,
            "booleanNoValue": null,
            "booleanValueType": "true/false",
            "booleanYesValue": null,
            "choiceAllowEmpty": false,
            "choiceAllowMultiple": false,
            "choiceSortOption": "Sequence",
            "choices": [
                {
                    "fieldValue": "DEBUG",
                    "sequence": 0,
                    "sysId": "041df93de77b4474bd846b84b545ae11",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "INFO",
                    "sequence": 1,
                    "sysId": "cb8a5c88a8024bd6a117741e9f1ea64f",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "WARNING",
                    "sequence": 2,
                    "sysId": "75cb5bda981347668c09d2050d426950",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "CRITICAL",
                    "sequence": 3,
                    "sysId": "96d2c824308d43e391cd1d611100a672",
                    "useFieldValueForLabel": true
                },
                {
                    "fieldValue": "ERROR",
                    "sequence": 4,
                    "sysId": "752c6d1acdd442dc8be21c2077331230",
                    "useFieldValueForLabel": true
                }
            ],
            "defaultListView": false,
            "fieldLength": null,
            "fieldMapping": "Choice Field 1",
            "fieldType": "Choice",
            "fieldValue": "DEBUG",
            "formColumnSpan": 1,
            "formEndRow": false,
            "formStartRow": false,
            "hint": "DEBUG, INFO, WARNING, ERROR, CRITICAL",
            "intFieldMax": null,
            "intFieldMin": null,
            "label": "Loglevel",
            "name": "loglevel",
            "noSpaceIfHidden": false,
            "requireIfField": null,
            "requireIfFieldValue": null,
            "requireIfVisible": false,
            "required": false,
            "sequence": 24,
            "showIfField": null,
            "showIfFieldValue": null,
            "sysId": "b60ce2f4b8b847bbad0dc9156481c2b9"
        }
    ],
    "name": "GitHub",
    "outputFailureOnly": false,
    "outputReturnFile": null,
    "outputReturnNline": "200",
    "outputReturnSline": "1",
    "outputReturnText": null,
    "outputReturnType": "OUTERR",
    "outputType": "STDOUT",
    "runtimeDir": null,
    "script": null,
    "scriptTypeWindows": "uapy",
    "scriptUnix": "#!/opt/universal/python3.6/bin/python3\n#         Origins: Stonebranch\n#          Author: Abdullah Saglam\n#          Date: 27-05-2020\n#\n#    Requires Universal Agent for Linux\n#\n#    Copyright (c) Stonebranch, 2021.  All rights reserved.\n#\n#    Purpose: Import/Export from/to Github\n#\n#\n#    Version History:\n#    1.0     ASA     13-07-2020      Created\n#    1.1     ASA     27-08-2020      SAP Task\n#    1.2     ASA     18-11-2021      Support all objects\n#    1.3     ASA     18-11-2021      cleanup\n#    1.4     ASA     20-11-2021      cleanup\n#    1.5     ASA     20-11-2021      cleanup\n#    1.6     ASA     20-11-2021      cleanup\n#    1.7     ASA     17-02-2021      http response handling\n#    1.8     ASA     17-02-2021      bugfix\n#\n# --\nimport json\nimport logging\nimport re\nimport site\nimport sys\nimport urllib\n\nimport requests\nfrom github import Github\n\ngl_version = \"1.8\"\ngl_variable_prefix = \"var\"\n\n# \"${ops_var_}\"\nif \"${ops_task_name}\" == \"$\"\"{ops_task_name}\":\n    print(\"OUT OF UAC\")\n    # gl_operation_type = \"UAC_to_GitHub\"\n    # gl_operation_type = \"GitHub_to_UAC\"\n    # gl_operation_type = \"UAC_to_Script\"\n    gl_operation_type = \"Script_to_UAC\"\n    gl_object_name = \"pip_install - DUMMY\"\n    gl_script_name = \"pip_install - DUMMY\"\n    gl_object_type = \"universaltemplate\"\n    gl_object_sub_type = \"\"\n    gl_business_services = \"\"\n    gl_git_base_url = \"\"\n    gl_requests_verify = False\n    gl_repo_path = \"asaglam0/dev\"\n    gl_branch = \"universal\"\n    gl_folder = \"new_upload\"\n    gl_change_message = \"${ops_execution_user}_${ops_agent_name}_app.version_%s_${ops_launch_time}_change_${ops_var_change_message}\" % gl_version\n    gl_base_url_other_uac = 'https://deutsche.stonebranchdev.cloud'\n    import config\n\n    gl_base_url_uac = config.base_url_uac_ps2.rstrip(\" /\")\n    gl_auth_uac = (config.username_ps2_oa,\n                   config.password_ps2_oa)\n    gl_github_token = config.github_token\n    logging.basicConfig(level=logging.DEBUG,\n                        format=' %(asctime)s - %(levelname)s - %(message)s')\n    pass\nelse:\n    gl_operation_type = \"${ops_var_operation_type}\"\n    gl_git_base_url = \"${ops_var_git_base_url}\"\n    gl_requests_verify = False\n    gl_github_token = \"${_credentialPwd('${ops_var_github_token}')}\"\n    gl_repo_path = \"${ops_var_repo_path}\"\n    gl_branch = \"${ops_var_branch}\"\n    gl_folder = \"${ops_var_folder}\"\n    gl_change_message = \"${ops_execution_user}_${ops_agent_name}_app.version_%s_${ops_launch_time}_change_${ops_var_change_message}\" % gl_version\n    gl_base_url_uac = \"${ops_var_base_url_uac}\".rstrip(\" /\")\n    gl_auth_uac = (\"${_credentialUser('${ops_var_rest_credentials_uac}')}\",\n                   \"${_credentialPwd('${ops_var_rest_credentials_uac}')}\")\n    gl_object_name = \"${ops_var_object_name}\"\n    gl_script_name = \"${ops_var_script_name}\"\n    gl_object_type = \"${ops_var_object_type}\"\n    gl_object_sub_type = \"${ops_var_object_sub_type}\"\n    gl_business_services = \"${ops_var_business_services}\"\n    logging.basicConfig(level=\"${ops_var_loglevel}\",\n                        format=' %(asctime)s - %(levelname)s - %(message)s')\n\n\ndef uac_rest_call(method, resource, query, json_data):\n    logging.debug(\"uac_rest_call start\")\n    headers = {\"content-type\": \"application/json\", \"Accept\": \"application/json\"}\n    uri = f\"{gl_base_url_uac}/resources{resource}{query}\"\n    try:\n        if method == \"get\":\n            response = requests.get(uri,\n                                    headers=headers,\n                                    auth=gl_auth_uac,\n                                    verify=gl_requests_verify)\n        elif method == \"post\":\n            response = requests.post(uri,\n                                     headers=headers,\n                                     json=json_data,\n                                     auth=gl_auth_uac,\n                                     verify=gl_requests_verify)\n        elif method == \"delete\":\n            response = requests.delete(uri,\n                                       headers=headers,\n                                       json=json_data,\n                                       auth=gl_auth_uac,\n                                       verify=gl_requests_verify)\n        elif method == \"put\":\n            response = requests.put(uri,\n                                    headers=headers,\n                                    json=json_data,\n                                    auth=gl_auth_uac,\n                                    verify=gl_requests_verify)\n            if not response.ok:\n                logging.debug(f\"Failed with reason : {response.text}\")\n                response = requests.post(uri,\n                                         headers=headers,\n                                         json=json_data,\n                                         auth=gl_auth_uac,\n                                         verify=gl_requests_verify)\n        else:\n            response = \"\"\n    except Exception as unknown_exception:\n        logging.error(f\"Error Calling {gl_base_url_uac} API {sys.exc_info()}\")\n        sys.exit(1)\n    if response.ok:\n        pass\n    else:\n        logging.error(f\"{uri} Response Code : {response.status_code}\")\n        logging.error(f\"Failed with reason : {response.text}\")\n        sys.exit(1)\n        response = None\n    if response:\n        logging.debug(\"response: \" + response.text)\n    resp_data = None\n    try:\n        resp_data = response.json()\n        # ...\n    except Exception as unknown_exception:\n        # no JSON returned\n        pass\n    logging.debug(\"received data: %s...\" % json.dumps(resp_data)[0:10])\n    logging.debug(\"uac_rest_call end\")\n    return resp_data\n\n\ndef handle_operation(operation_type, object_type, object_name,\n                     object_sub_type=\"\",\n                     business_services=\"\", workflow_name=\"\"):\n    sb_git = None\n    if \"GitHub\" in gl_operation_type:\n        sb_git = SbGitHub(gl_github_token, gl_git_base_url, gl_repo_path,\n                          gl_branch,\n                          gl_folder)\n    # List and/or download Objects\n    method = \"\"\n    key = \"name\"\n    json_data = {}\n    if operation_type in \"UAC_to_GitHub,UAC_to_Script\":\n        method = \"get\"\n        if object_type == \"task\":\n            json_data = {\n                \"name\": object_name,\n                \"type\": object_sub_type,\n                \"businessServices\": business_services,\n                \"workflowName\": workflow_name,\n            }\n            method = \"post\"\n        elif object_type == \"trigger\":\n            json_data = {\n                \"name\": object_name,\n                \"type\": object_sub_type\n            }\n            method = \"post\"\n        elif object_type == \"script\":\n            json_data = {}\n            key = \"scriptName\"\n        elif object_type == \"variable\":\n            json_data = {\n                \"scope\": \"global\",\n                \"variableName\": object_name\n            }\n            method = \"post\"\n\n        list_response = uac_rest_call(method, \"/\" + object_type + \"/list\",\n                                      \"\", json_data)\n        for uac_object in list_response:\n            uac_object_name = uac_object[key]\n            if object_sub_type:\n                repo_name = uac_object_name + \".\" + object_type + \".\" + object_sub_type + \".json\"\n            else:\n                repo_name = uac_object_name + \".\" + object_type + \".json\"\n            if object_type in \"task,trigger,variable\":\n                logging.debug(f\"{object_type} name = {uac_object_name}\")\n                # Download Definitions\n                query = {}\n                method = \"get\"\n                if object_type == \"task\":\n                    query = {\"taskid\": uac_object[\"sysId\"]}\n                elif object_type == \"trigger\":\n                    query = {\"triggerid\": uac_object[\"sysId\"]}\n                elif object_type == \"variable\":\n                    query = {\"variableid\": uac_object[\"sysId\"]}\n                else:\n                    query = {}\n                query = urllib.parse.urlencode(query)\n                query = f\"?{query}\"\n                response = uac_rest_call(method, \"/\" + object_type, query, \"\")\n                json_string = json.dumps(response, indent=4)\n                if operation_type == \"UAC_to_GitHub\":\n                    sb_git.update_create_file(repo_name,\n                                              gl_change_message,\n                                              json_string)\n                elif operation_type == \"UAC_to_Script\":\n                    script_operations(operation_type, uac_object_name,\n                                      json_string)\n            else:\n                name_query = object_name.replace(\"*\", \".+\")\n                name_query = name_query.replace(\"?\", \".\")\n                name_query = \"^\" + name_query + \"$\"\n                if re.search(name_query, uac_object_name):\n                    logging.debug(f\"{object_type} name = {uac_object_name}\")\n                    # Download Definitions\n                    json_string = json.dumps(uac_object, indent=4)\n                    if operation_type == \"UAC_to_GitHub\":\n                        sb_git.update_create_file(repo_name,\n                                                  gl_change_message,\n                                                  json_string)\n                        pass\n                    elif operation_type == \"UAC_to_Script\":\n                        script_operations(operation_type, uac_object_name,\n                                          json_string)\n                        pass\n    # Upload Definitions (Modify)\n    elif operation_type in \"GitHub_to_UAC,Script_to_UAC\":\n        method = \"put\"\n        if object_sub_type:\n            repo_name = object_name + \".\" + object_type + \".\" + object_sub_type + \".json\"\n        else:\n            repo_name = object_name + \".\" + object_type + \".json\"\n        json_data = None\n        if operation_type == \"GitHub_to_UAC\":\n            file_content = sb_git.get_file(repo_name)\n            json_data = json.loads(file_content)\n        elif operation_type == \"Script_to_UAC\":\n            file_content = script_operations(operation_type, object_name, \"\")\n            json_data = json.loads(file_content[\"content\"])\n        upload_response = uac_rest_call(method, \"/\" + object_type,\n                                        \"\", json_data)\n        logging.info(upload_response)\n\n\ndef script_operations(operation_type, object_name, content):\n    if operation_type == \"UAC_to_Script\":\n        method = \"put\"\n        sys_id = None\n        script_json = uac_rest_call(\"get\",\n                                    f\"/script?scriptname={object_name}\",\n                                    \"\", {})\n        if script_json:\n            sys_id = script_json[\"sysId\"]\n        json_data = {\"content\": content, \"description\": object_name,\n                     \"notes\": [], \"sysId\": sys_id,\n                     \"resolveVariables\": False, \"retainSysIds\": False,\n                     \"scriptName\": object_name, \"scriptType\": \"Data\"}\n        logging.debug(json_data)\n        export_response = uac_rest_call(method, \"/script\",\n                                        \"\", json_data)\n        logging.info(export_response)\n        pass\n    elif operation_type == \"Script_to_UAC\":\n        method = \"get\"\n        export_response = uac_rest_call(method,\n                                        f\"/script?scriptname={object_name}\",\n                                        \"\", {})\n        logging.info(export_response)\n        pass\n    return export_response\n\n\nclass SbGitHub:\n    \"\"\"Stonebranch GitHub Class for python\n\n    This class is written for git operations\n    to and from GitHub\n\n    Attributes:\n        _base_url: github base url\n        _repo_path: keeps the resource identifier\n        _branch: keeps the class library version\n        _github: region name\n        _git_repo: git repo\n    \"\"\"\n\n    def __init__(self, token, base_url, repo_path, branch, folder):\n        self._base_url = base_url\n        self._repo_path = repo_path\n        self._branch = branch\n        self._folder = folder\n        self._github = None\n        self._git_repo = None\n        self.connect_git(token)\n\n    def connect_git(self, token):\n        if self._base_url:\n            logging.info('connect_git repo %s with base_url %s' % (\n                self._repo_path, self._base_url))\n            self._github = Github(token, base_url=self._base_url)\n        else:\n            logging.info(\n                'connect_git repo %s with default base_url' % self._repo_path)\n            self._github = Github(token)\n        self._git_repo = self._github.get_repo(self._repo_path)\n\n    def update_create_file(self, file_name, change_message, file_content):\n        logging.info('update_create_file %s' % file_name)\n        if file_content is None:\n            logging.info('file_content empty, empty file will be created')\n            file_content = \" \"\n        file_path = self._folder + \"/\" + file_name\n        try:\n            contents = self._git_repo.get_contents(file_path, ref=self._branch)\n            logging.debug(contents)\n            self._git_repo.update_file(contents.path, change_message,\n                                       file_content, contents.sha,\n                                       branch=self._branch)\n        except Exception as unknown_exception:\n            logging.debug(unknown_exception)\n            if \"Not Found\" in str(unknown_exception):\n                logging.debug(\"will be created\")\n                self._git_repo.create_file(file_path, change_message,\n                                           file_content, branch=self._branch)\n            else:\n                logging.error(unknown_exception)\n                exit(1)\n\n    def get_file(self, file_name):\n        logging.info('get_file %s' % file_name)\n        file_path = self._folder + \"/\" + file_name\n        try:\n            contents = self._git_repo.get_contents(file_path, ref=self._branch)\n            logging.debug(contents)\n            return contents.decoded_content.decode('utf-8')\n        except Exception as unknown_exception:\n            logging.error(unknown_exception)\n            exit(1)\n\n    def get_contents(self, file_name):\n        logging.info('get_file %s' % file_name)\n        file_path = self._folder + \"/\" + file_name\n        try:\n            contents = self._git_repo.get_contents(file_path, ref=self._branch)\n            logging.debug(contents)\n            return contents\n        except Exception as unknown_exception:\n            logging.error(unknown_exception)\n            exit(1)\n\n\ndef main():\n    global gl_operation_type\n    global gl_object_type\n    global gl_object_name\n    global gl_object_sub_type\n    global gl_business_services\n    print_variables()\n    if \"Script\" in gl_operation_type:\n        gl_object_name = gl_script_name\n    handle_operation(gl_operation_type, gl_object_type, gl_object_name,\n                     gl_object_sub_type, gl_business_services)\n\n\ndef print_variables():\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Python sites <<< \" + str(site.getsitepackages()) + \" >>>\")\n    logging.info(\n        \"Executing task version \" + gl_version + \" with following parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    all_variables = r\"\"\"${_scope}\"\"\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\nif __name__ == '__main__':\n    main()\n",
    "scriptWindows": "#!/opt/universal/python3.6/bin/python3\n#         Origins: Stonebranch\n#          Author: Abdullah Saglam\n#          Date: 27-05-2020\n#\n#    Requires Universal Agent for Linux\n#\n#    Copyright (c) Stonebranch, 2021.  All rights reserved.\n#\n#    Purpose: Import/Export from/to Github\n#\n#\n#    Version History:\n#    1.0     ASA     13-07-2020      Created\n#    1.1     ASA     27-08-2020      SAP Task\n#    1.2     ASA     18-11-2021      Support all objects\n#    1.3     ASA     18-11-2021      cleanup\n#    1.4     ASA     20-11-2021      cleanup\n#    1.5     ASA     20-11-2021      cleanup\n#    1.6     ASA     20-11-2021      cleanup\n#    1.7     ASA     17-02-2021      http response handling\n#    1.8     ASA     17-02-2021      bugfix\n#\n# --\nimport json\nimport logging\nimport re\nimport site\nimport sys\nimport urllib\n\nimport requests\nfrom github import Github\n\ngl_version = \"1.8\"\ngl_variable_prefix = \"var\"\n\n# \"${ops_var_}\"\nif \"${ops_task_name}\" == \"$\"\"{ops_task_name}\":\n    print(\"OUT OF UAC\")\n    # gl_operation_type = \"UAC_to_GitHub\"\n    # gl_operation_type = \"GitHub_to_UAC\"\n    # gl_operation_type = \"UAC_to_Script\"\n    gl_operation_type = \"Script_to_UAC\"\n    gl_object_name = \"pip_install - DUMMY\"\n    gl_script_name = \"pip_install - DUMMY\"\n    gl_object_type = \"universaltemplate\"\n    gl_object_sub_type = \"\"\n    gl_business_services = \"\"\n    gl_git_base_url = \"\"\n    gl_requests_verify = False\n    gl_repo_path = \"asaglam0/dev\"\n    gl_branch = \"universal\"\n    gl_folder = \"new_upload\"\n    gl_change_message = \"${ops_execution_user}_${ops_agent_name}_app.version_%s_${ops_launch_time}_change_${ops_var_change_message}\" % gl_version\n    gl_base_url_other_uac = 'https://deutsche.stonebranchdev.cloud'\n    import config\n\n    gl_base_url_uac = config.base_url_uac_ps2.rstrip(\" /\")\n    gl_auth_uac = (config.username_ps2_oa,\n                   config.password_ps2_oa)\n    gl_github_token = config.github_token\n    logging.basicConfig(level=logging.DEBUG,\n                        format=' %(asctime)s - %(levelname)s - %(message)s')\n    pass\nelse:\n    gl_operation_type = \"${ops_var_operation_type}\"\n    gl_git_base_url = \"${ops_var_git_base_url}\"\n    gl_requests_verify = False\n    gl_github_token = \"${_credentialPwd('${ops_var_github_token}')}\"\n    gl_repo_path = \"${ops_var_repo_path}\"\n    gl_branch = \"${ops_var_branch}\"\n    gl_folder = \"${ops_var_folder}\"\n    gl_change_message = \"${ops_execution_user}_${ops_agent_name}_app.version_%s_${ops_launch_time}_change_${ops_var_change_message}\" % gl_version\n    gl_base_url_uac = \"${ops_var_base_url_uac}\".rstrip(\" /\")\n    gl_auth_uac = (\"${_credentialUser('${ops_var_rest_credentials_uac}')}\",\n                   \"${_credentialPwd('${ops_var_rest_credentials_uac}')}\")\n    gl_object_name = \"${ops_var_object_name}\"\n    gl_script_name = \"${ops_var_script_name}\"\n    gl_object_type = \"${ops_var_object_type}\"\n    gl_object_sub_type = \"${ops_var_object_sub_type}\"\n    gl_business_services = \"${ops_var_business_services}\"\n    logging.basicConfig(level=\"${ops_var_loglevel}\",\n                        format=' %(asctime)s - %(levelname)s - %(message)s')\n\n\ndef uac_rest_call(method, resource, query, json_data):\n    logging.debug(\"uac_rest_call start\")\n    headers = {\"content-type\": \"application/json\", \"Accept\": \"application/json\"}\n    uri = f\"{gl_base_url_uac}/resources{resource}{query}\"\n    try:\n        if method == \"get\":\n            response = requests.get(uri,\n                                    headers=headers,\n                                    auth=gl_auth_uac,\n                                    verify=gl_requests_verify)\n        elif method == \"post\":\n            response = requests.post(uri,\n                                     headers=headers,\n                                     json=json_data,\n                                     auth=gl_auth_uac,\n                                     verify=gl_requests_verify)\n        elif method == \"delete\":\n            response = requests.delete(uri,\n                                       headers=headers,\n                                       json=json_data,\n                                       auth=gl_auth_uac,\n                                       verify=gl_requests_verify)\n        elif method == \"put\":\n            response = requests.put(uri,\n                                    headers=headers,\n                                    json=json_data,\n                                    auth=gl_auth_uac,\n                                    verify=gl_requests_verify)\n            if not response.ok:\n                logging.debug(f\"Failed with reason : {response.text}\")\n                response = requests.post(uri,\n                                         headers=headers,\n                                         json=json_data,\n                                         auth=gl_auth_uac,\n                                         verify=gl_requests_verify)\n        else:\n            response = \"\"\n    except Exception as unknown_exception:\n        logging.error(f\"Error Calling {gl_base_url_uac} API {sys.exc_info()}\")\n        sys.exit(1)\n    if response.ok:\n        pass\n    else:\n        logging.error(f\"{uri} Response Code : {response.status_code}\")\n        logging.error(f\"Failed with reason : {response.text}\")\n        sys.exit(1)\n        response = None\n    if response:\n        logging.debug(\"response: \" + response.text)\n    resp_data = None\n    try:\n        resp_data = response.json()\n        # ...\n    except Exception as unknown_exception:\n        # no JSON returned\n        pass\n    logging.debug(\"received data: %s...\" % json.dumps(resp_data)[0:10])\n    logging.debug(\"uac_rest_call end\")\n    return resp_data\n\n\ndef handle_operation(operation_type, object_type, object_name,\n                     object_sub_type=\"\",\n                     business_services=\"\", workflow_name=\"\"):\n    sb_git = None\n    if \"GitHub\" in gl_operation_type:\n        sb_git = SbGitHub(gl_github_token, gl_git_base_url, gl_repo_path,\n                          gl_branch,\n                          gl_folder)\n    # List and/or download Objects\n    method = \"\"\n    key = \"name\"\n    json_data = {}\n    if operation_type in \"UAC_to_GitHub,UAC_to_Script\":\n        method = \"get\"\n        if object_type == \"task\":\n            json_data = {\n                \"name\": object_name,\n                \"type\": object_sub_type,\n                \"businessServices\": business_services,\n                \"workflowName\": workflow_name,\n            }\n            method = \"post\"\n        elif object_type == \"trigger\":\n            json_data = {\n                \"name\": object_name,\n                \"type\": object_sub_type\n            }\n            method = \"post\"\n        elif object_type == \"script\":\n            json_data = {}\n            key = \"scriptName\"\n        elif object_type == \"variable\":\n            json_data = {\n                \"scope\": \"global\",\n                \"variableName\": object_name\n            }\n            method = \"post\"\n\n        list_response = uac_rest_call(method, \"/\" + object_type + \"/list\",\n                                      \"\", json_data)\n        for uac_object in list_response:\n            uac_object_name = uac_object[key]\n            if object_sub_type:\n                repo_name = uac_object_name + \".\" + object_type + \".\" + object_sub_type + \".json\"\n            else:\n                repo_name = uac_object_name + \".\" + object_type + \".json\"\n            if object_type in \"task,trigger,variable\":\n                logging.debug(f\"{object_type} name = {uac_object_name}\")\n                # Download Definitions\n                query = {}\n                method = \"get\"\n                if object_type == \"task\":\n                    query = {\"taskid\": uac_object[\"sysId\"]}\n                elif object_type == \"trigger\":\n                    query = {\"triggerid\": uac_object[\"sysId\"]}\n                elif object_type == \"variable\":\n                    query = {\"variableid\": uac_object[\"sysId\"]}\n                else:\n                    query = {}\n                query = urllib.parse.urlencode(query)\n                query = f\"?{query}\"\n                response = uac_rest_call(method, \"/\" + object_type, query, \"\")\n                json_string = json.dumps(response, indent=4)\n                if operation_type == \"UAC_to_GitHub\":\n                    sb_git.update_create_file(repo_name,\n                                              gl_change_message,\n                                              json_string)\n                elif operation_type == \"UAC_to_Script\":\n                    script_operations(operation_type, uac_object_name,\n                                      json_string)\n            else:\n                name_query = object_name.replace(\"*\", \".+\")\n                name_query = name_query.replace(\"?\", \".\")\n                name_query = \"^\" + name_query + \"$\"\n                if re.search(name_query, uac_object_name):\n                    logging.debug(f\"{object_type} name = {uac_object_name}\")\n                    # Download Definitions\n                    json_string = json.dumps(uac_object, indent=4)\n                    if operation_type == \"UAC_to_GitHub\":\n                        sb_git.update_create_file(repo_name,\n                                                  gl_change_message,\n                                                  json_string)\n                        pass\n                    elif operation_type == \"UAC_to_Script\":\n                        script_operations(operation_type, uac_object_name,\n                                          json_string)\n                        pass\n    # Upload Definitions (Modify)\n    elif operation_type in \"GitHub_to_UAC,Script_to_UAC\":\n        method = \"put\"\n        if object_sub_type:\n            repo_name = object_name + \".\" + object_type + \".\" + object_sub_type + \".json\"\n        else:\n            repo_name = object_name + \".\" + object_type + \".json\"\n        json_data = None\n        if operation_type == \"GitHub_to_UAC\":\n            file_content = sb_git.get_file(repo_name)\n            json_data = json.loads(file_content)\n        elif operation_type == \"Script_to_UAC\":\n            file_content = script_operations(operation_type, object_name, \"\")\n            json_data = json.loads(file_content[\"content\"])\n        upload_response = uac_rest_call(method, \"/\" + object_type,\n                                        \"\", json_data)\n        logging.info(upload_response)\n\n\ndef script_operations(operation_type, object_name, content):\n    if operation_type == \"UAC_to_Script\":\n        method = \"put\"\n        sys_id = None\n        script_json = uac_rest_call(\"get\",\n                                    f\"/script?scriptname={object_name}\",\n                                    \"\", {})\n        if script_json:\n            sys_id = script_json[\"sysId\"]\n        json_data = {\"content\": content, \"description\": object_name,\n                     \"notes\": [], \"sysId\": sys_id,\n                     \"resolveVariables\": False, \"retainSysIds\": False,\n                     \"scriptName\": object_name, \"scriptType\": \"Data\"}\n        logging.debug(json_data)\n        export_response = uac_rest_call(method, \"/script\",\n                                        \"\", json_data)\n        logging.info(export_response)\n        pass\n    elif operation_type == \"Script_to_UAC\":\n        method = \"get\"\n        export_response = uac_rest_call(method,\n                                        f\"/script?scriptname={object_name}\",\n                                        \"\", {})\n        logging.info(export_response)\n        pass\n    return export_response\n\n\nclass SbGitHub:\n    \"\"\"Stonebranch GitHub Class for python\n\n    This class is written for git operations\n    to and from GitHub\n\n    Attributes:\n        _base_url: github base url\n        _repo_path: keeps the resource identifier\n        _branch: keeps the class library version\n        _github: region name\n        _git_repo: git repo\n    \"\"\"\n\n    def __init__(self, token, base_url, repo_path, branch, folder):\n        self._base_url = base_url\n        self._repo_path = repo_path\n        self._branch = branch\n        self._folder = folder\n        self._github = None\n        self._git_repo = None\n        self.connect_git(token)\n\n    def connect_git(self, token):\n        if self._base_url:\n            logging.info('connect_git repo %s with base_url %s' % (\n                self._repo_path, self._base_url))\n            self._github = Github(token, base_url=self._base_url)\n        else:\n            logging.info(\n                'connect_git repo %s with default base_url' % self._repo_path)\n            self._github = Github(token)\n        self._git_repo = self._github.get_repo(self._repo_path)\n\n    def update_create_file(self, file_name, change_message, file_content):\n        logging.info('update_create_file %s' % file_name)\n        if file_content is None:\n            logging.info('file_content empty, empty file will be created')\n            file_content = \" \"\n        file_path = self._folder + \"/\" + file_name\n        try:\n            contents = self._git_repo.get_contents(file_path, ref=self._branch)\n            logging.debug(contents)\n            self._git_repo.update_file(contents.path, change_message,\n                                       file_content, contents.sha,\n                                       branch=self._branch)\n        except Exception as unknown_exception:\n            logging.debug(unknown_exception)\n            if \"Not Found\" in str(unknown_exception):\n                logging.debug(\"will be created\")\n                self._git_repo.create_file(file_path, change_message,\n                                           file_content, branch=self._branch)\n            else:\n                logging.error(unknown_exception)\n                exit(1)\n\n    def get_file(self, file_name):\n        logging.info('get_file %s' % file_name)\n        file_path = self._folder + \"/\" + file_name\n        try:\n            contents = self._git_repo.get_contents(file_path, ref=self._branch)\n            logging.debug(contents)\n            return contents.decoded_content.decode('utf-8')\n        except Exception as unknown_exception:\n            logging.error(unknown_exception)\n            exit(1)\n\n    def get_contents(self, file_name):\n        logging.info('get_file %s' % file_name)\n        file_path = self._folder + \"/\" + file_name\n        try:\n            contents = self._git_repo.get_contents(file_path, ref=self._branch)\n            logging.debug(contents)\n            return contents\n        except Exception as unknown_exception:\n            logging.error(unknown_exception)\n            exit(1)\n\n\ndef main():\n    global gl_operation_type\n    global gl_object_type\n    global gl_object_name\n    global gl_object_sub_type\n    global gl_business_services\n    print_variables()\n    if \"Script\" in gl_operation_type:\n        gl_object_name = gl_script_name\n    handle_operation(gl_operation_type, gl_object_type, gl_object_name,\n                     gl_object_sub_type, gl_business_services)\n\n\ndef print_variables():\n    logging.info(\"Python version <<< \" + sys.version + \" >>>\")\n    logging.info(\"Python sites <<< \" + str(site.getsitepackages()) + \" >>>\")\n    logging.info(\n        \"Executing task version \" + gl_version + \" with following parameters\")\n    print_defined_variables(gl_variable_prefix)\n\n\ndef print_defined_variables(variable_prefix):\n    all_variables = r\"\"\"${_scope}\"\"\"\n    separate_variables = [variable for variable in all_variables.split(', ') if\n                          \"ops_\" + variable_prefix in variable]\n    logging.info(str(separate_variables).replace(\", \", \",\\n\"))\n\n\nif __name__ == '__main__':\n    main()\n",
    "sysId": "46113277dc64476ea652f0209546229d",
    "useCommonScript": false,
    "variablePrefix": "var",
    "waitForOutput": false
}